name: Human review pipeline

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  pull_request_review:
    types: [submitted, dismissed]

permissions:               
  pull-requests: read
  contents: read

jobs:
  approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Require N approvals based on size label
        uses: actions/github-script@v7
        with:
          script: |
            const sizes = { 'size::s': 1, 'size::m': 2, 'size::l': 3 };

            const owner   = context.repo.owner;
            const repo    = context.repo.repo;
            const prNum   = context.payload.pull_request.number;

            /* ---------- work out which label is present ---------- */
            const { data: pr } = await github.rest.pulls.get({
              owner, repo, pull_number: prNum
            });
            const labels = pr.labels.map(l => l.name.toLowerCase());

            let required = 1;                        // default fallback
            for (const [label, n] of Object.entries(sizes)) {
              if (labels.includes(label)) required = Math.max(required, n);
            }

            /* ---------- count unique APPROVED reviewers ---------- */
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner, repo, pull_number: prNum, per_page: 100,
            });

            const approvals = new Map();             // latest review per user
            for (const r of reviews) approvals.set(r.user.login, r.state);
            const approved = [...approvals.values()]
                             .filter(state => state === 'APPROVED').length;

            core.info(`Need ${required} approvals, have ${approved}`);

            if (approved < required) {
              core.setFailed(
                `❌ PR needs ${required} approval(s) but only ${approved} so far`
              );
            } else {
              core.notice('✅ Enough approvals—merge allowed');
            }
